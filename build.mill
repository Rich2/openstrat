//build.sc Copyright 2025 Richard Oliver. Licensed under Apache Licence version 2.0.
import mill._, scalalib._, scalajslib._, scalanativelib._, publish._

trait Common extends ScalaModule
{ def version = "0.3.8snap"
  def scalaVersion = "3.6.4"
  def scalacOptions = Seq("-feature", "-language:higherKinds,implicitConversions", "-noindent", "-deprecation", "-encoding", "UTF-8", "-unchecked")
}

trait CommonJvm extends Common
{ Outer =>
  trait InnerTests extends ScalaTests
  { def ivyDeps = Agg(ivy"com.lihaoyi::utest:0.8.5")
    def testFramework = "utest.runner.Framework"
    def sources = T.sources(Outer.millSourcePath / "TestSrc", millSourcePath / "src")
    def resources = T.sources(Outer.millSourcePath / "TestRes", millSourcePath / "res")
  }
}

trait CommonJs extends ScalaJSModule with Common
{ def scalaJSVersion = "1.19.0"
  def ivyDeps = Agg(ivy"org.scala-js::scalajs-dom_sjs1:2.8.0")
}

object Util extends CommonJvm
{ def sources1 = T.sources(Seq("src", "srcArr", "srcParse",  "srcPersist").map(name => PathRef(millSourcePath / name)))
  def sources2 = T.sources(millSourcePath / "srcRArr", millSourcePath / "JvmSrc")
  def sources = T.sources{ sources1() ++ sources2() }
  def resources = T.sources(millSourcePath / "res", T.workspace / "User")
  object test extends InnerTests
}

 object UtilExs extends CommonJvm
{ def moduleDeps = Seq(Geom)
  def sources = T.sources{ Seq("src", "srcDoc").map(name => PathRef(T.workspace / "Util" / "UtilExs" / name)) }
}

object UtilJs extends CommonJs
{ def sources = Util.sources1()
}

object Geom extends CommonJvm
{
  def sources1 = T.sources(
    Seq("src", "srcLines", "srcShapes", "srcPoly", "srcQuad", "srcUnits", "srcImperial", "srcGraphic", "srcGui", "srcTrans", "srcUnits", "srcWeb", "srcEarth").
    map(name => PathRef(millSourcePath / name)))

  def sources2 = T.sources(millSourcePath / "JvmSrc")
  def sources = T.sources { sources1() ++ sources2() }
  def moduleDeps = Seq(Util)
  object test extends InnerTests
}

object GeomFx extends CommonJvm
{ def sources = T.sources(T.workspace / "Geom" / "GeomFx" / "src")
  def moduleDeps = Seq(Geom)

  def unmanagedClasspath = T {
    import coursier._, parse.DependencyParser
    val fxMod = Dependency(Module(org"org.openjfx", ModuleName("javafx-controls")), "15.0.1")
    val files = Fetch().addDependencies(fxMod).run()
    val pathRefs = files.map(f => PathRef(os.Path(f)))
    Agg(pathRefs: _*)
  }

  def forkArgs = Seq("--module-path",
    sys.env("JAVAFX_HOME") + ":" + "/Users/ajr/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-controls/15.0.1",
    "--add-modules", "javafx.controls"
  )
}

object GeomJs extends CommonJs
{ def moduleDeps = Seq(UtilJs)
  def source2 = T.source(T.workspace / "Geom" / "GeomJs" / "src")
  def sources = Geom.sources1() :+ source2()
}

object GeomExs extends CommonJvm
{ def moduleDeps = Seq(Geom, UtilExs)
  def sources1 = T.sources{ Seq("src", "srcDoc", "srcLessons").map(name => PathRef(T.workspace / "Geom" / "GeomExs" / name)) }
  def source2 = T.source(T.workspace / "Geom" / "GeomExs" / "JvmSrc")
  def sources = T.sources { sources1() :+ source2() }
  def mainClass = Some("learn.LsE1App")
}

object GeomExsJs extends CommonJs
{ def moduleDeps = Seq(GeomJs)
  def source2 = T.source(T.workspace / "Geom" / "GeomExs" / "GeomExsJs" / "src")
  def sources = GeomExs.sources1() :+ source2()
  def mainClass = Some("learn.LessonAppJs")
}

object Tiling extends CommonJvm
{ def moduleDeps = Seq(Geom) 
  def sources1 = T.sources(Seq("src", "srcHex", "srcHLayer", "srcSq", "srcSqLayer").map(name => PathRef(millSourcePath / name)))
  def sources = sources1()
  object test extends InnerTests
}

object TilingJs extends CommonJs
{ def moduleDeps = Seq(GeomJs)
  def sources = Tiling.sources1()
}

object TilingExs extends CommonJvm
{ def moduleDeps = Seq(Tiling, GeomExs)
  def sources = T.sources{ Seq("src", "srcDoc").map(name => PathRef(T.workspace / "Tiling" / "TilingExs" / name)) }
  object test extends InnerTests
  def mainClass = Some("ostrat.pZero.TilingTryApp")
}

object EGrid extends CommonJvm
{ def moduleDeps = Seq(Tiling)
  def sources1 = T.sources(Seq("src", "srcPts").map(name => PathRef(millSourcePath / name)))
  def source2 = T.source(T.workspace / "EGrid" / "JvmSrc")
  def sources = sources1() :+ source2()
  object test extends InnerTests
}

object EGridExs extends CommonJvm
{ def moduleDeps = Seq(EGrid, TilingExs)
  def sources = T.sources{ Seq("src", "srcDoc").map(name => PathRef(T.workspace / "EGrid" / "EGridExs" / name)) }
}

object EGridJs extends CommonJs
{ def moduleDeps = Seq(TilingJs)
  def sources = EGrid.sources1()

  trait Base extends CommonJs
  { def name: String
    def sources = T.sources(Seq(PathRef(T.workspace / "EGrid" / "EGridJs" / "src")))
    def moduleDeps = Seq(EGridJs)
    def mainClass = Some("ostrat.pSJs." + name + "Js")
  }

  object EG1300 extends Base { def name = "EG1300" }
  object EG1000 extends Base { def name = "EG1000" }
  object EG640 extends Base { def name = "EG640" }
  object EG460 extends Base { def name = "EG460" }
  object EG320 extends Base { def name = "EG320" }
  object EG220Europe extends Base { def name = "EG220Europe" }
  object EG220EuropeWide extends Base { def name = "EG220EuropeWide" }
  object EG220NAmerica extends Base { def name = "EG220NAmerica" }
  object EG160Europe extends Base { def name = "EG160Europe" }
  object EG120Europe extends Base { def name = "EG120Europe" }
  object EG80Europe extends Base { def name = "EG80Europe" }
  object EarthApp extends Base { def name = "EarthApp"}
}

object Apps extends CommonJvm
{ def moduleDeps = Seq(EGrid)
  def sources1 = T.sources(Seq("src", "srcStrat").map(name => PathRef(millSourcePath / name)))
  def sources = sources1()
  object test extends InnerTests
}

object AppsExs extends CommonJvm
{ def moduleDeps = Seq(Apps, EGridExs)
  def sources = T.sources{ Seq("src", "srcDoc").map(name => PathRef(T.workspace / "Apps" / "AppsExs" / name)) }
}

object AppsJs extends CommonJs
{ def moduleDeps = Seq(EGridJs)  
  def source2 = T.source(PathRef(T.workspace / "Apps" / "AppsJs" / "src"))
  def sources = Apps.sources1() :+ source2()
  def ivyDeps = Agg(ivy"io.github.cquiroz::scala-java-time_sjs1:2.6.0")
}

trait AppsJs extends CommonJs
{ def moduleDeps = Seq(AppsJs)
}

object AppJs extends Module
{
  trait Base extends AppsJs
  { def name: String
    def mainClass = Some("ostrat.pSJs." + name + "AppJs")
  }
  object DicelessApp extends Base { def name = "Diceless" }
  object WW2App extends Base { def name = "WW2" }
  object PericuloApp extends Base { def name = "Periculo" }
  object WW1App extends Base { def name = "WW1" }
  object BC305App extends Base { def name = "BC305" }
  object SorsApp extends Base { def name = "Sors" }
  object PeriApp extends Base { def name = "Peri" }
  object DiscovApp extends Base { def name = "Discov" }
  object IndRevApp extends Base { def name = "IndRev" }
  object UnitLocApp extends Base { def name = "UnitLoc" }
  object CivRiseApp extends Base { def name = "CivRise" }
  object ZugApp extends Base { def name = "Zug" }
  object FlagsApp extends Base { def name = "Flags" }
  object DungeonApp extends Base { def name = "Dungeon" }
  object PlanetsApp extends Base { def name = "Planets" }
  object ChessApp extends Base { def name = "Chess" }
}

object Dev extends CommonJvm
{ def moduleDeps = Seq(AppsExs)
  def sources = T.sources(Seq("src", "srcDoc", "JvmSrc").map(name => PathRef(millSourcePath / name)))
  def mainClass = Some("ostrat.pDev.SiteHtmlWrite")
}

object DevFx extends CommonJvm
{ def moduleDeps = Seq(Dev, GeomFx)
  def sources = T.sources(T.workspace / "Dev" / "DevFx" / "src")
  def mainClass = Some("ostrat.pFx.DevApp")
}

def run() = DevFx.runBackground()

def SiteStage = Task{
  import AppJs._, EGridJs._
  DicelessApp.fullLinkJS()
  WW2App.fullLinkJS()
  PericuloApp.fullLinkJS()
  WW1App.fullLinkJS()
  BC305App.fullLinkJS()
  SorsApp.fullLinkJS()
  IndRevApp.fullLinkJS()
  DiscovApp.fullLinkJS()
  UnitLocApp.fullLinkJS()
  CivRiseApp.fullLinkJS()
  ZugApp.fullLinkJS()
  FlagsApp.fullLinkJS()
  DungeonApp.fullLinkJS()
  PlanetsApp.fullLinkJS()
  ChessApp.fullLinkJS()
  EG1300.fullLinkJS()
  EG1000.fullLinkJS()
  EG640.fullLinkJS()
  EG460.fullLinkJS()
  EG320.fullLinkJS()
  EG220Europe.fullLinkJS()
  EG220EuropeWide.fullLinkJS()
  EG220NAmerica.fullLinkJS()
  EG160Europe.fullLinkJS()
  EG120Europe.fullLinkJS()
  EG80Europe.fullLinkJS()
  EarthApp.fullLinkJS()
  DevFx.assembly()

  Dev.runner().run(mainClass = "ostrat.pDev.MillStageServer", args = Array[String]())
}

def JarsStage = Task{
  packAllMain()
  packAllDocSrc()
  Dev.runner().run(mainClass = "ostrat.pDev.MillJars", args = Array[String]())
}

object Servlet extends CommonJvm
{ def sources = T.sources(T.workspace / "Dev" / "Servlet" / "src")
  def ivyDeps = Agg(ivy"jakarta.servlet:jakarta.servlet-api:6.0.0")
  def moduleDeps = Seq(Dev)
}

object ServletExtras extends CommonJvm
{ def sources = T.sources(T.workspace / "Dev" / "ServletExtras" / "src")
  def moduleDeps = Seq(Dev)
}

def packAllMain = Task{
  Util.jar()
  Geom.jar()
  Tiling.jar()
  EGrid.jar()
  Apps.jar()
}

def packAllDocSrc = Task{
  Util.docJar()
  Util.sourceJar()
  UtilJs.jar()
  UtilJs.docJar()
  UtilJs.sourceJar()
  Geom.docJar()
  Geom.sourceJar()
  GeomFx.jar()
  GeomFx.docJar()
  GeomFx.sourceJar()
  GeomJs.jar()
  GeomJs.docJar()
  GeomJs.sourceJar()
  Tiling.docJar()
  Tiling.sourceJar()
  TilingJs.jar()
  TilingJs.docJar()
  TilingJs.sourceJar()
  EGrid.docJar()
  EGrid.sourceJar()
  Apps.docJar()
  Apps.sourceJar()
}

def ServletStage = Task{
  packAllMain()
  ServletExtras.runner().run(mainClass = "ostrat.pDev.MillStagingServlet", args = Array[String]())
}